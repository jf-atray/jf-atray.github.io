<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.10.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-06-21T23:01:17-05:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Jon Francis</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">Unlatch from Lazy Ladder</title><link href="http://localhost:4000/plc/2025/06/14/unlatch-from-lazy-ladder.html" rel="alternate" type="text/html" title="Unlatch from Lazy Ladder" /><published>2025-06-14T15:38:00-05:00</published><updated>2025-06-14T15:38:00-05:00</updated><id>http://localhost:4000/plc/2025/06/14/unlatch-from-lazy-ladder</id><content type="html" xml:base="http://localhost:4000/plc/2025/06/14/unlatch-from-lazy-ladder.html"><![CDATA[<ol>
  <li>Rough write</li>
  <li>Organize loose thoughts</li>
  <li>Document claims</li>
  <li>Include AB reference images</li>
  <li>Edit</li>
</ol>

<h1 id="1-the-intro">1. The intro</h1>
<p>When state bites back - Latching and unlatching encourages “bool = true” behavior where programmers are littering state left and right with no regard for maintenance. A perfectly orchestrated ladder will involve one output. You should be able to follow write-references backwards and chart any variable.</p>

<h1 id="2-the-problem">2. The problem</h1>
<p>The problem with state is it relies on you expecting the pile of variables to be in one exact shape when your code executes. This is very unhardened behavior. All it takes is for something you ‘didn’t expect’ to result in unexpected behavior. If you’re in the industries I’m in, ‘unexpected behavior’ is unacceptable. Additionally, latching is often done in-line which can express a lack of confidence in the sequencing of the variables. You may be one cycle off from catastrophic race-condition and not even know it.</p>

<h1 id="3-recognizing-smell">3. Recognizing smell</h1>
<p>There are a few kinds of anti-patterns that should send shivers.</p>
<ul>
  <li>How did this bit get turned on?</li>
  <li>Forgetting to reset some variable on module reset</li>
  <li>Variable bloat
    <ul>
      <li>Having tons of bools in a big chain that latch each other one to represent a stage of work and don’t really represent anything themselves</li>
    </ul>
  </li>
</ul>

<h1 id="4-solutions-abstract">4. Solutions abstract</h1>
<p>It can be acceptable to SET/RESET multiple times… if they’re in differently branches of the system. Only one SET/RESET should be accessible to the code at the time. I get it, in an ideal world we should have one OTE at the top that completely describes top-to-bottom behavior but let’s cut ourselves a little slack. Your output-valve may have two different state machines for homing versus steady-state behavior, but you should NEVER be relying on code in separate realms of the codebase to coincidentally knock your variables into the right shape.</p>

<h1 id="5-solutions-handy">5. Solutions handy</h1>
<ul>
  <li>If you think you need a plex of bools for a shifting condition, are you sure you don’t just need an INT instead?
    <ul>
      <li>“Oh but what happens if that INT somehow ends up at a variable I don’t expect?”</li>
      <li>Well now your downstream functions implicitly won’t consume the invalid value, unlike a series of bools which are used to produce invalid products</li>
    </ul>
  </li>
  <li>Split results from conditions.</li>
</ul>

<h1 id="6-a-whole-thing">6. A whole thing</h1>
<p>Consider a simple state machine that moves a set of parts in order. Todo put some of boss’s work here as example.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[ STEP &gt;= 10 ] [ STEP &lt; 40        ]  -&gt;  ( Grabber_Arm )
[ STEP &gt;= 30 ] [ STEP &lt; 50        ]  -&gt;  ( Gripper_Vlv )

[ STEP ==  0 ]                       -&gt;  ( MOV  1 Step )
[ STEP ==  1 ] [ Grabber_Homed    ]  -&gt;  ( MOV 10 Step )
[ STEP == 10 ] [ Grabber_Extended ]  -&gt;  ( MOV 20 Step )
[ STEP == 20 ] [ Part_Present     ]  -&gt;  ( MOV 30 Step )
[ STEP == 30 ] [ Gripper_OK       ]  -&gt;  ( MOV 40 Step )
[ STEP == 40 ] [ Grabber_Homed    ]  -&gt;  ( MOV 50 Step )
[ STEP == 50 ] [ Gripper_Released ]  -&gt;  ( MOV  0 Step )
</code></pre></div></div>]]></content><author><name></name></author><category term="plc" /><summary type="html"><![CDATA[Rough write Organize loose thoughts Document claims Include AB reference images Edit]]></summary></entry><entry><title type="html">Welcome to Jekyll!</title><link href="http://localhost:4000/jekyll/update/2025/06/12/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2025-06-12T15:26:44-05:00</published><updated>2025-06-12T15:26:44-05:00</updated><id>http://localhost:4000/jekyll/update/2025/06/12/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2025/06/12/welcome-to-jekyll.html"><![CDATA[<p>You’ll find this post in your <code class="language-plaintext highlighter-rouge">_posts</code> directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run <code class="language-plaintext highlighter-rouge">jekyll serve</code>, which launches a web server and auto-regenerates your site when a file is updated.</p>

<p>Jekyll requires blog post files to be named according to the following format:</p>

<p><code class="language-plaintext highlighter-rouge">YEAR-MONTH-DAY-title.MARKUP</code></p>

<p>Where <code class="language-plaintext highlighter-rouge">YEAR</code> is a four-digit number, <code class="language-plaintext highlighter-rouge">MONTH</code> and <code class="language-plaintext highlighter-rouge">DAY</code> are both two-digit numbers, and <code class="language-plaintext highlighter-rouge">MARKUP</code> is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.</p>

<p>Jekyll also offers powerful support for code snippets:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">print_hi</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="s2">"Hi, </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">"</span>
<span class="k">end</span>
<span class="n">print_hi</span><span class="p">(</span><span class="s1">'Tom'</span><span class="p">)</span>
<span class="c1">#=&gt; prints 'Hi, Tom' to STDOUT.</span></code></pre></figure>

<p>Check out the <a href="https://jekyllrb.com/docs/home">Jekyll docs</a> for more info on how to get the most out of Jekyll. File all bugs/feature requests at <a href="https://github.com/jekyll/jekyll">Jekyll’s GitHub repo</a>. If you have questions, you can ask them on <a href="https://talk.jekyllrb.com/">Jekyll Talk</a>.</p>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.]]></summary></entry></feed>